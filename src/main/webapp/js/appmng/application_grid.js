// Generated by CoffeeScript 1.3.3
(function() {
  var localIds;

  localIds = {
    app_grid: '#applicationGridList'
  };

  $(function() {
    var appGrid;
    appGrid = $(localIds.app_grid).jqGrid({
      datatype: 'json',
      url: 'json/appgrid.json',
      editurl: "app/create-or-add-application",
      cellurl: 'app/change-application-version',
      cellsubmit: 'remote',
      cellEdit: true,
      ajaxSelectOptions: 'json/selecttest.json',
      width: 700,
      height: 350,
      pager: '#pager',
      rowNum: 10,
      rowList: [10, 20, 30],
      sortname: 'name',
      sortorder: 'asc',
      viewrecords: true,
      gridview: true,
      altRows: true,
      caption: 'Applications for Product',
      colNames: ['ID', 'Application', 'Version', 'Dict. Num.'],
      colModel: [
        {
          name: 'id',
          index: 'id',
          width: 55,
          align: 'center',
          editable: false,
          hidden: true
        }, {
          name: 'name',
          index: 'name',
          width: 100,
          editable: false,
          align: 'center'
        }, {
          name: 'version',
          index: 'version',
          width: 90,
          editable: true,
          align: 'center',
          edittype: 'select',
          editoptions: {
            value: {}
          }
        }, {
          name: 'dictNum',
          index: 'dictNum',
          width: 80,
          editable: false,
          align: 'center'
        }
      ],
      afterEditCell: function(id, name, val, iRow, iCol) {
        var select, url;
        if (name === 'version') {
          select = $("#" + iRow + "_version", localIds.app_grid);
          url = "rest/applications/appssamebase/" + id;
          return $.getJSON(url, {}, function(json) {
            return select.append($(json).map(function() {
              var opt;
              opt = new Option(this.version, this.id);
              opt.selected = this.version === val;
              return opt;
            }));
          });
        }
      },
      beforeSubmitCell: function(rowid, cellname, value, iRow, iCol) {
        var changeSelect, productSelect;
        productSelect = $("" + exports.product_panel.select_product_version_id);
        changeSelect = $("#" + iRow + "_version", localIds.app_grid);
        return {
          productId: productSelect.val(),
          newAppId: changeSelect.val()
        };
      },
      afterSubmitCell: function(serverresponse, rowid, cellname, value, iRow, iCol) {
        var jsonFromServer;
        jsonFromServer = eval('(' + serverresponse.responseText + ')');
        return [0 === jsonFromServer.status, jsonFromServer.message];
      }
    });
    appGrid.jqGrid('navGrid', '#pager', {
      edit: false,
      add: false,
      del: false,
      search: false,
      view: false
    });
    appGrid.navButtonAdd('#pager', {
      caption: "",
      buttonicon: "ui-icon-trash",
      position: "first",
      onClickButton: function() {
        var gr;
        appGrid = $(localIds.app_grid);
        gr = appGrid.jqGrid('getGridParam', 'selrow');
        if (null === gr) {
          $.msgBox("Please Select Row to delete!", null, {
            title: 'Select Row',
            width: 300,
            height: 'auto'
          });
          false;
        }
        return appGrid.jqGrid('delGridRow', gr, {
          mtype: 'post',
          editData: [],
          recreateForm: false,
          modal: true,
          jqModal: true,
          reloadAfterSubmit: false,
          url: 'app/remove-application',
          beforeShowForm: function(form) {
            var permanent;
            permanent = $('#permanentDeleteSignId', form);
            if (0 === permanent.length) {
              return $("<tr><td>Delete permanently</td><td><input align='left' type='checkbox' id='permanentDeleteSignId'></td></tr>").appendTo($("tbody", form));
            } else {
              return permanent.removeAttr("checked");
            }
          },
          onclickSubmit: function(params, posdata) {
            var productSelect;
            productSelect = $("" + exports.product_panel.select_product_version_id);
            return {
              productId: productSelect.val(),
              permanent: Boolean($('#permanentDeleteSignId').attr("checked"))
            };
          },
          afterSubmit: function(response, postdata) {
            var appTree, jsonFromServer;
            jsonFromServer = eval("(" + response.responseText + ")");
            if (jsonFromServer.id) {
              appTree = $.jstree._reference("#appTree");
              (appTree._get_children(appTree.get_selected())).each(function(index, app) {
                if (app.id === ("" + jsonFromServer.id)) {
                  return appTree.delete_node(app);
                }
              });
            }
            return [0 === jsonFromServer.status, jsonFromServer.message];
          }
        });
      }
    });
    return appGrid.navButtonAdd('#pager', {
      caption: "",
      buttonicon: "ui-icon-plus",
      position: "first",
      onClickButton: function() {
        return $("#" + ids.dialog.new_or_add_application).dialog("open");
      }
    });
  });

  exports.application_grid.application_grid_id = localIds.app_grid;

}).call(this);
