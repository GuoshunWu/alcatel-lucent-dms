// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require, util, i18n) {
    var $, c18n, dicGrid, handlers;
    $ = require('jqgrid');
    util = require('util');
    i18n = require('i18n!nls/appmng');
    require('jqmsgbox');
    c18n = require('i18n!nls/common');
    handlers = {
      'String': {
        title: i18n.dialog.stringsettings.title,
        handler: function(rowData, dialogs) {
          dialogs.dictPreviewStringSettings.data("param", rowData);
          return dialogs.dictPreviewStringSettings.dialog('open');
        }
      },
      'Language': {
        title: i18n.dialog.languagesettings.title,
        handler: function(rowData, dialogs) {
          dialogs.dictPreviewLangSettings.data("param", rowData);
          return dialogs.dictPreviewLangSettings.dialog('open');
        }
      }
    };
    dicGrid = $('#dictListPreviewGrid').jqGrid({
      url: '',
      datatype: 'json',
      editurl: "",
      mtype: 'POST',
      width: 1000,
      minHeight: 200,
      height: 240,
      pager: '#dictListPreviewPager',
      rowNum: 100,
      sortname: 'base.name',
      sortorder: 'asc',
      viewrecords: true,
      cellEdit: true,
      cellurl: '/app/deliver-update-dict',
      gridview: true,
      multiselect: true,
      caption: i18n.grid.dictlistpreview.caption,
      colNames: ['LangRefCode', 'Dictionary', 'Version', 'Format', 'Encoding', 'Labels', 'Error', 'Warning', 'Action'],
      colModel: [
        {
          name: 'langrefcode',
          index: 'langrefcode',
          width: 55,
          align: 'center',
          hidden: true
        }, {
          name: 'name',
          index: 'base.name',
          width: 200,
          editable: true,
          align: 'left'
        }, {
          name: 'version',
          index: 'version',
          width: 25,
          editable: true,
          align: 'center',
          editrules: {
            required: true
          }
        }, {
          name: 'format',
          index: 'base.format',
          width: 60,
          editable: true,
          edittype: 'select',
          editoptions: {
            value: "DCT:DCT;Dictionary conf:Dictionary conf;Text properties:Text properties;XML labels:XML labels"
          },
          align: 'center'
        }, {
          name: 'encoding',
          index: 'base.encoding',
          width: 40,
          editable: true,
          edittype: 'select',
          editoptions: {
            value: 'ISO-8859-1:ISO-8859-1;UTF-8:UTF-8;UTF-16LE:UTF-16LE;UTF-16BE:UTF-16BE'
          },
          align: 'center'
        }, {
          name: 'labelNum',
          index: 'labelNum',
          width: 20,
          align: 'center'
        }, {
          name: 'error',
          index: 'errorCount',
          width: 20,
          align: 'center'
        }, {
          name: 'warning',
          index: 'warningCount',
          width: 20,
          align: 'center'
        }, {
          name: 'action',
          index: 'action',
          width: 70,
          editable: false,
          align: 'center'
        }
      ],
      ondblClickRow: function(rowid, iRow, iCol, e) {},
      beforeProcessing: function(data, status, xhr) {
        var actIndex, actions, grid, k, v;
        actIndex = $(this).getGridParam('colNames').indexOf('Action');
        if ($(this).getGridParam('multiselect')) {
          --actIndex;
        }
        actions = [];
        for (k in handlers) {
          v = handlers[k];
          actions.push(k);
        }
        grid = this;
        return $(data.rows).each(function(index) {
          var rowData;
          rowData = this;
          return this.cell[actIndex] = $(actions).map(function() {
            return "<A id='action_" + this + "_" + rowData.id + "_" + actIndex + "'style='color:blue' title='" + handlers[this].title + "' href=# >" + this + "</A>";
          }).get().join('&nbsp;&nbsp;&nbsp;&nbsp;');
        });
      },
      beforeSubmitCell: function(rowid, cellname, value, iRow, iCol) {
        return {
          handler: ($(this).getGridParam('postData')).handler
        };
      },
      afterSubmitCell: function(serverresponse, rowid, cellname, value, iRow, iCol) {
        var jsonFromServer, success;
        jsonFromServer = eval("(" + serverresponse.responseText + ")");
        success = 0 === jsonFromServer.status;
        if (success) {
          $(this).trigger('reloadGrid');
        }
        return [success, jsonFromServer.message];
      },
      gridComplete: function() {
        var grid;
        grid = $(this);
        $("tr[class!='jqgfirstrow']", grid).each(function(index, row) {
          var rowData;
          rowData = grid.getRowData(row.id);
          if (parseInt(rowData.warning) > 0) {
            $(row).css('background', '#FFFFAA');
          }
          if (parseInt(rowData.error) > 0) {
            return $(row).css('background', '#FFD2D2');
          }
        });
        return $('a[id^=action_]', this).click(function() {
          var a, action, col, rowData, rowid, _ref;
          _ref = this.id.split('_'), a = _ref[0], action = _ref[1], rowid = _ref[2], col = _ref[3];
          rowData = grid.getRowData(rowid);
          delete rowData.action;
          rowData.id = rowid;
          rowData.handler = grid.getGridParam('postData').handler;
          return handlers[action].handler(rowData, require('appmng/dialogs'));
        });
      }
    });
    return dicGrid.jqGrid('navGrid', '#dictListPreviewPager', {
      add: false,
      edit: false,
      search: false,
      del: false
    }, {}, {}, {});
  });

}).call(this);
