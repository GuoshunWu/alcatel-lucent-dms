// Generated by CoffeeScript 1.3.3

/*
Created by IntelliJ IDEA.
User: Guoshun Wu
Date: -8-
Time: 下午7:
To change this template use File | Settings | File Templates.
*/


(function() {

  define(["jquery"], function($) {
    var formatJonString;
    String.prototype.format = function() {
      var args;
      args = arguments;
      return this.replace(/\{(\d+)\}/g, function(m, i) {
        return args[i];
      });
    };
    String.prototype.endWith = function(str) {
      if (!str || str.length > this.length) {
        return false;
      }
      return this.substring(this.length - str.length) === str;
    };
    String.prototype.startWith = function(str) {
      if (!str || str.length > this.length) {
        return false;
      }
      return this.substr(0, str.length) === str;
    };
    /*
      insert elem at pos in array.
    */

    Array.prototype.insert = function(pos, elem) {
      var newarray, _i, _len;
      newarray = this.slice(0, pos);
      if ($.isArray(elem)) {
        newarray = newarray.concat(elem.slice(0));
      } else {
        newarray.push(elem);
      }
      newarray = newarray.concat(this.slice(pos, this.length));
      this.length = 0;
      for (_i = 0, _len = newarray.length; _i < _len; _i++) {
        elem = newarray[_i];
        this.push(elem);
      }
      return this;
    };
    /*
      remove the element at pos in array, return the removed element.
    */

    Array.prototype.remove = function(start, len) {
      var delElem, elem, newarray, _i, _len;
      if (!len) {
        len = 1;
      }
      newarray = this.slice(0, start);
      newarray = newarray.concat(this.slice(start + len, this.length));
      delElem = len > 1 ? this.slice(start, start + len) : this[start];
      this.length = 0;
      for (_i = 0, _len = newarray.length; _i < _len; _i++) {
        elem = newarray[_i];
        this.push(elem);
      }
      return delElem;
    };
    /*
      format json string to pretty.
    */

    formatJonString = function(jsonString) {
      var char, i, indentStr, j, k, newLine, pos, retval, str;
      str = jsonString;
      pos = i = 0;
      indentStr = "  ";
      newLine = "\n";
      retval = '';
      while (i < str.length) {
        char = str.substring(i, i + 1);
        if (char === "}" || char === "]") {
          retval += newLine;
          --pos;
          j = 0;
          while (j < pos) {
            retval += indentStr;
            j++;
          }
        }
        retval += char;
        if (char === "{" || char === "[" || char === ",") {
          retval += newLine;
          if (char === "{" || char === "[") {
            ++pos;
          }
          k = 0;
          while (k < pos) {
            retval += indentStr;
            k++;
          }
        }
        i++;
      }
      return retval;
    };
    return {
      /*
        Test here.
      */

      json2string: function(jsonObj) {
        return formatJonString(JSON.stringify(jsonObj));
      },
      getDictLanguagesByDictId: function(id, callback) {
        var _this = this;
        return $.getJSON('rest/languages', {
          prop: 'id,name',
          dict: id
        }, function(languages) {
          return callback(languages);
        });
      }
    };
  });

}).call(this);
