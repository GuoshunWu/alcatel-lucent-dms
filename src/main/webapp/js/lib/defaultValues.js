// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  define(['jqgrid', 'jqueryui', 'i18n!nls/common'], function($, ui, c18n) {
    $.extend($.jgrid.defaults, {
      loadui: "block",
      mtype: 'post',
      afterRestoreCell: function(rowid, value, iRow, iCol) {
        return $(this).jqGrid("setCell", rowid, iCol, $.jgrid.htmlEncode(value), false, false, true);
      },
      afterSaveCell: function(rowid, cellname, value, iRow, iCol) {
        var colProp, grid;
        grid = $(this);
        colProp = grid.jqGrid('getColProp', cellname);
        if (colProp.edittype !== 'select') {
          return grid.jqGrid("setCell", rowid, iCol, $.jgrid.htmlEncode(value), false, false, true);
        }
      },
      formatCell: function(rowid, cellname, value, iRow, iCol) {},
      beforeRequest: function() {
        var grid;
        grid = $(this);
        if (grid.getRowData().length) {
          return grid.clearGridData();
        }
      },

      /*
      JQGrid 4.7 has this feature itself, but it use shift key instead of alt as enter input help key
      Due to some bugs found in jqGrid 4.7, rollback to jqGrid 4.6 now
       */
      afterEditCell: function(rowid, cellname, value, iRow, iCol) {
        var editElem, elemId, grid, originalValue;
        grid = $(this);
        elemId = iRow + ("_" + cellname);
        editElem = $(document.getElementById(elemId)).off("keydown");
        originalValue = editElem.val();
        return editElem.on('keydown', function(e) {
          if ($.ui.keyCode.ESCAPE === e.which) {
            grid.jqGrid('restoreCell', iRow, iCol);
            e.stopPropagation();
            return;
          }
          if ($.ui.keyCode.ENTER !== e.which) {
            return;
          }
          if (e.altKey) {
            $(this).val("" + ($(this).val()) + "\n");
            return true;
          }
          grid.jqGrid('saveCell', iRow, iCol);
          return false;
        }).on('blur', function(e) {
          if (originalValue === editElem.val()) {
            return grid.restoreCell(iRow, iCol);
          } else {
            return grid.saveCell(iRow, iCol);
          }
        });
      }
    });
    $.extend($.ui.dialog.prototype.options, {
      autoOpen: false,
      modal: true,
      beforeClose: function(event, ui) {
        var grid;
        grid = $("table.ui-jqgrid-btable", this);
        if (!grid.length) {
          return;
        }
        return setTimeout((function() {
          return grid.clearGridData();
        }), 300);
      },
      open: function(event, ui) {
        var grid, me;
        me = $(this);
        grid = $("table.ui-jqgrid-btable", this);
        if (!grid.length) {

        }
      },
      buttons: [
        {
          text: c18n.close,
          click: function() {
            return $(this).dialog("close");
          }
        }
      ]
    });
    return $.ajaxSetup({
      timeout: 1000 * 60 * 30,
      cache: false
    });
  });

}).call(this);

//# sourceMappingURL=defaultValues.js.map
