// Generated by CoffeeScript 1.5.0
(function() {

  jQuery(function($) {
    var long_polling, randomStr;
    randomStr = function(length, alphbet) {
      var ch, rstr, _i, _len;
      if (length == null) {
        length = 10;
      }
      if (alphbet == null) {
        alphbet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz';
      }
      rstr = '';
      for (_i = 0, _len = alphbet.length; _i < _len; _i++) {
        ch = alphbet[_i];
        rstr += alphbet[Math.floor(Math.random() * alphbet.length)];
        length--;
        if (0 === length) {
          break;
        }
      }
      return rstr;
    };
    long_polling = function(cmd, evtId, url, callback) {
      var pollingInterval, postData, reTryAjax, timeout;
      postData = {
        cmd: cmd,
        evtId: evtId
      };
      if (cmd === "start") {
        postData.freq = ($("#eFreq").val() ? parseInt($("#eFreq").val()) : 2000);
        postData.speed = ($("#speed").val() ? parseInt($("#speed").val()) : 1000);
      }
      if (postData.freq < 2) {
        postData.freq = 2;
      }
      if (postData.speed < 2) {
        postData.speed = 2;
      }
      pollingInterval = $("#pollingFreq").val() ? parseInt($("#pollingFreq").val()) : 1000;
      timeout = $("#timeout").val() ? parseInt($("#timeout").val()) : 5000;
      reTryAjax = function(retryTimes, retryCounter) {
        if (retryTimes == null) {
          retryTimes = Number.MAX_VALUE;
        }
        if (retryCounter == null) {
          retryCounter = 0;
        }
        return $.ajax(url, {
          cache: false,
          data: postData,
          timeout: timeout,
          type: 'post',
          dataType: "json"
        }).done(function(data, textStatus, jqXHR) {
          callback(data.msg);
          if (/done/.test(data.msg)) {
            return;
          }
          return setTimeout((function() {
            return long_polling("process", data.evtId, url, callback);
          }), pollingInterval);
        }).fail(function(jqXHR, textStatus, errorThrown) {
          if ('timeout' !== textStatus) {
            if (typeof console !== "undefined" && console !== null) {
              console.log("error: " + textStatus);
            }
            return;
          }
          if (retryTimes > 0) {
            if (typeof console !== "undefined" && console !== null) {
              console.log("Request " + textStatus + ", I will retry in " + pollingInterval + " milliseconds.");
            }
            return setTimeout((function() {
              return reTryAjax(--retryTimes, ++retryCounter);
            }), pollingInterval);
          } else {
            return typeof console !== "undefined" && console !== null ? console.log("I have retried " + retryCounter + " times. There may be a network connection issue, please check network cable.") : void 0;
          }
        });
      };
      return reTryAjax(10);
    };
    /* create progress bar and update its progress if necessary.
    */

    window.getProgressBar = function() {
      return $("<div id=\"progressbar_" + (randomStr(5)) + "\" class=\"progressbar\">\n<div class=\"progressbar-label\">\nLoading...\n</div>\n</div>").appendTo(document.body).draggable({
        grid: [50, 20],
        opacity: 0.35
      }).progressbar({
        max: 100,
        value: 0,
        create: function(e, ui) {
          this.label = $('div.progressbar-label', this);
          return $(this).position({
            my: 'center',
            at: 'center'
          });
        },
        change: function(e, ui) {
          var value;
          value = $(this).progressbar("value");
          return this.label.html((value.toPrecision(4)) + "%");
        },
        complete: function(e, ui) {}
      });
    };
    return $("#startAction").button().click(function(e) {
      var callback, pb;
      pb = getProgressBar();
      callback = function(msg, sep) {
        if (sep == null) {
          sep = ";";
        }
        if (!pb) {
          return;
        }
        if (typeof console !== "undefined" && console !== null) {
          console.log(msg);
        }
        if (/done/.test(msg)) {
          pb.remove();
        }
        return $(msg.split(sep)).each(function(index, elem) {
          var percent;
          if ($.isNumeric(elem)) {
            percent = parseFloat(elem);
          }
          return pb.progressbar("value", percent);
        });
      };
      return long_polling('start', null, '../scripts/cp.groovy', callback);
    });
  });

}).call(this);
