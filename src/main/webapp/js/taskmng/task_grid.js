// Generated by CoffeeScript 1.3.3
(function() {

  define(['jqgrid', 'jqmsgbox', 'util', 'taskmng/dialogs', 'i18n!nls/taskmng', 'i18n!nls/common', 'blockui', 'jqupload', 'iframetransport', 'require'], function($, jqmsgbox, util, dialogs, i18n, c18n, blockui, jqupload, ifram, require) {
    var handlers, taskGrid;
    handlers = {
      'Download': function(param) {
        var filename;
        filename = "" + ($('#productBase option:selected').text()) + "_" + ($('#productRelease option:selected').text()) + "_translation";
        filename += "_" + (new Date().format('yyyyMMdd_hhmmss')) + ".zip";
        $.blockUI();
        return $.post('/task/generate-task-files', {
          id: param.id,
          filename: filename
        }, function(json) {
          var downloadForm;
          $.unblockUI();
          if (json.status !== 0) {
            $.msgBox(json.message, null, {
              title: c18n.error
            });
            return;
          }
          downloadForm = $('#downloadTaskFiles');
          $('#fileLoc', downloadForm).val(json.fileLoc);
          return downloadForm.submit();
        });
      },
      'History…': function(param) {
        return alert('History…');
      },
      'Close': function(param) {
        if (param.status === '1') {
          return;
        }
        $.blockUI;
        return $.post('/task/close-task', {
          id: param.id
        }, function(json) {
          $.unblockUI();
          if (json.status !== 0) {
            $.msgBox(json.message, null, {
              title: c18n.error
            });
            return;
          }
          return $("#taskGrid").trigger('reloadGrid');
        });
      },
      'Upload': (function(param) {})
    };
    taskGrid = $("#taskGrid").jqGrid({
      url: 'json/taskgrid.json',
      mtype: 'POST',
      postData: {},
      editurl: "",
      datatype: 'json',
      width: $(window).width() * 0.95,
      height: 400,
      shrinkToFit: false,
      rownumbers: true,
      loadonce: false,
      pager: '#taskPager',
      rowNum: 60,
      rowList: [10, 20, 30, 60, 120],
      sortname: 'createTime',
      sortorder: 'desc',
      viewrecords: true,
      gridview: true,
      multiselect: true,
      cellEdit: true,
      cellurl: 'http://127.0.0.1:2000',
      colNames: ['Task', 'Create time', 'Last upload time', 'Status', 'Actions'],
      colModel: [
        {
          name: 'name',
          index: 'name',
          width: 250,
          editable: false,
          stype: 'select',
          align: 'left'
        }, {
          name: 'createTime',
          index: 'createTime',
          width: 150,
          editable: false,
          align: 'right'
        }, {
          name: 'lastUpdateTime',
          index: 'lastUpdateTime',
          width: 150,
          align: 'left'
        }, {
          name: 'status',
          index: 'status',
          width: 80,
          align: 'left',
          editable: false,
          edittype: 'select',
          editoptions: {
            value: "0:" + i18n.task.open + ";1:" + i18n.task.closed
          },
          formatter: 'select'
        }, {
          name: 'actions',
          index: 'actions',
          width: 280,
          align: 'center'
        }
      ],
      beforeProcessing: function(data, status, xhr) {
        var actIndex, actions, k, v;
        actIndex = $(this).getGridParam('colNames').indexOf('Actions');
        --actIndex;
        if ($(this).getGridParam('multiselect')) {
          --actIndex;
        }
        actions = [];
        for (k in handlers) {
          v = handlers[k];
          actions.push(k);
        }
        return $(data.rows).each(function(index) {
          var rowData;
          rowData = this;
          return this.cell[actIndex] = $(actions).map(function(index, action) {
            if (action === 'Upload') {
              return "<span id='upload_" + this + "_" + rowData.id + "_" + actIndex + "'></span>";
            }
            return "<a id='action_" + this + "_" + rowData.id + "_" + actIndex + "' style='color:blue'title='" + this + "' href=#  >" + this + "</A>";
          }).get().join('&nbsp;&nbsp;&nbsp;&nbsp;');
        });
      },
      gridComplete: function() {
        var grid;
        grid = $(this);
        $('a[id^=action_]', this).click(function() {
          var a, action, col, rowData, rowid, _ref;
          _ref = this.id.split('_'), a = _ref[0], action = _ref[1], rowid = _ref[2], col = _ref[3];
          rowData = grid.getRowData(rowid);
          delete rowData.actions;
          rowData.id = rowid;
          return handlers[action](rowData);
        });
        ($("#progressbar").draggable({
          grid: [50, 20],
          opacity: 0.35
        }).css({
          'z-index': 100,
          width: 600,
          textAlign: 'center',
          'position': 'absolute',
          'top': '45%',
          'left': '30%'
        }).progressbar({
          change: function(e, ui) {
            var value;
            value = ($(this).progressbar("value")).toPrecision(4) + '%';
            return $('#barvalue', this).html(value).css({
              "display": "block",
              "textAlign": "center"
            });
          }
        })).hide();
        return $('span[id^=upload_]', this).button({
          label: 'Upload'
        }, {
          create: function(e, ui) {
            var fileInput, rowid, _, _ref;
            _ref = this.id.split('_'), _ = _ref[0], _ = _ref[1], rowid = _ref[2];
            fileInput = $("<input type='file' id='" + this.id + "_fileInput' name='upload' title='Upload task file'accept='application/zip' multiple/>").css({
              position: 'absolute',
              top: -3,
              right: -3,
              border: '1px solid',
              borderWidth: '1px 1px 10px 0px',
              opacity: 0,
              filter: 'alpha(opacity=0)',
              cursor: 'pointer'
            }).appendTo(this);
            return fileInput.fileupload({
              type: 'POST',
              dataType: 'json',
              url: "/task/receive-task-files",
              formData: [
                {
                  name: 'id',
                  value: rowid
                }
              ],
              acceptFileTypes: /zip$/i,
              add: function(e, data) {
                data.submit();
                if (!$.browser.msie) {
                  return $("#progressbar").show();
                }
              },
              progressall: function(e, data) {
                var progress;
                progress = data.loaded / data.total * 100;
                return $('#progressbar').progressbar("value", progress);
              },
              done: function(e, data) {
                var jsonFromServer;
                if (!$.browser.msie) {
                  $("#progressbar").hide();
                }
                jsonFromServer = data.result;
                if (0 !== jsonFromServer.status) {
                  $.msgBox(jsonFromServer.message, null, {
                    title: c18n.error
                  });
                  return;
                }
                dialogs.transReport.data('param', {
                  id: rowid
                });
                return dialogs.transReport.dialog('open');
              }
            });
          }
        }).css({
          overflow: 'hidden'
        });
      },
      afterCreate: function(grid) {
        return grid.navGrid('#taskPager', {
          edit: false,
          add: false,
          del: false,
          search: false,
          view: false
        });
      }
    });
    taskGrid.getGridParam('afterCreate')(taskGrid);
    $('#transReport').button({}).click(function() {
      return dialogs.transReport.dialog('open');
    });
    $('#viewDetail').button({}).click(function() {
      return dialogs.viewDetail.dialog('open');
    });
    return {
      productVersionChanged: function(product) {
        var prop;
        taskGrid = $("#taskGrid");
        prop = "name,createTime,lastUpdateTime,status";
        return taskGrid.setGridParam({
          url: '/rest/tasks',
          postData: {
            prod: product.release.id,
            format: 'grid',
            prop: prop
          }
        }).trigger("reloadGrid");
      }
    };
  });

}).call(this);
