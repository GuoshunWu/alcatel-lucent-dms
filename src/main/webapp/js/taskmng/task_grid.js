// Generated by CoffeeScript 1.3.3
(function() {

  define(['jqgrid', 'util', 'require', 'taskmng/dialogs', 'i18n!nls/taskmng', 'i18n!nls/common', 'blockui', 'jqmsgbox'], function($, util, require, dialogs, i18n, c18n) {
    var handlers, taskGrid;
    handlers = {
      'Download': function(param) {
        alert('download');
        return console.log(param);
      },
      'History…': function(param) {
        alert('History…');
        return console.log(param);
      },
      'Close': function(param) {
        if (param.status === '1') {
          return;
        }
        $.blockUI({
          css: {
            backgroundColor: '#fff'
          },
          overlayCSS: {
            opacity: 0.2
          }
        });
        return $.post('/task/close-task', {
          id: param.id
        }, function(json) {
          $.unblockUI();
          if (json.status !== 0) {
            $.msgBox(json.message, null, {
              title: c18n.error
            });
            return;
          }
          return $("#taskGrid").trigger('reloadGrid');
        });
      }
    };
    taskGrid = $("#taskGrid").jqGrid({
      url: 'json/taskgrid.json',
      mtype: 'POST',
      postData: {},
      editurl: "",
      datatype: 'json',
      width: $(window).width() * 0.95,
      height: 400,
      shrinkToFit: false,
      rownumbers: true,
      loadonce: false,
      pager: '#taskPager',
      rowNum: 60,
      rowList: [10, 20, 30, 60, 120],
      sortname: 'name',
      sortorder: 'asc',
      viewrecords: true,
      gridview: true,
      multiselect: true,
      cellEdit: true,
      cellurl: 'http://127.0.0.1:2000',
      colNames: ['Task', 'Create time', 'Last upload time', 'Status', 'Actions'],
      colModel: [
        {
          name: 'name',
          index: 'name',
          width: 250,
          editable: false,
          stype: 'select',
          align: 'left'
        }, {
          name: 'createTime',
          index: 'createTime',
          width: 150,
          editable: false,
          align: 'right'
        }, {
          name: 'lastUpdateTime',
          index: 'lastUpdateTime',
          width: 150,
          align: 'left'
        }, {
          name: 'status',
          index: 'status',
          width: 80,
          align: 'left',
          editable: false,
          edittype: 'select',
          editoptions: {
            value: "0:" + i18n.task.open + ";1:" + i18n.task.closed
          },
          formatter: 'select'
        }, {
          name: 'actions',
          index: 'actions',
          width: 240,
          align: 'center'
        }
      ],
      beforeProcessing: function(data, status, xhr) {
        var actIndex, actions, k, v;
        actIndex = $(this).getGridParam('colNames').indexOf('Actions');
        --actIndex;
        if ($(this).getGridParam('multiselect')) {
          --actIndex;
        }
        actions = [];
        for (k in handlers) {
          v = handlers[k];
          actions.push(k);
        }
        return $(data.rows).each(function(index) {
          var rowData;
          rowData = this;
          return this.cell[actIndex] = $(actions).map(function(index) {
            return "<A id='action_" + this + "_" + rowData.id + "_" + actIndex + "' style='color:blue'title='" + this + "' href=#  >" + this + "</A>";
          }).get().join('&nbsp;&nbsp;&nbsp;&nbsp;');
        });
      },
      gridComplete: function() {
        var grid;
        grid = $(this);
        return $('a[id^=action_]', this).click(function() {
          var a, action, col, rowData, rowid, _ref;
          _ref = this.id.split('_'), a = _ref[0], action = _ref[1], rowid = _ref[2], col = _ref[3];
          rowData = grid.getRowData(rowid);
          delete rowData.actions;
          rowData.id = rowid;
          return handlers[action](rowData);
        });
      },
      afterCreate: function(grid) {
        return grid.navGrid('#taskPager', {
          edit: false,
          add: false,
          del: false,
          search: false,
          view: false
        });
      }
    });
    taskGrid.getGridParam('afterCreate')(taskGrid);
    $('#transReport').button({}).click(function() {
      return dialogs.transReport.dialog('open');
    });
    $('#viewDetail').button({}).click(function() {
      return dialogs.viewDetail.dialog('open');
    });
    return {
      productVersionChanged: function(product) {
        var prop;
        taskGrid = $("#taskGrid");
        prop = "name,createTime,lastUpdateTime,status";
        return taskGrid.setGridParam({
          url: '/rest/tasks',
          postData: {
            prod: product.release.id,
            format: 'grid',
            prop: prop
          }
        }).trigger("reloadGrid");
      }
    };
  });

}).call(this);
