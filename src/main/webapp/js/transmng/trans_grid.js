// Generated by CoffeeScript 1.5.0
(function() {

  define(['jqgrid', 'jqmsgbox', 'blockui', 'i18n!nls/transmng', 'i18n!nls/common', 'dms-urls', 'dms-util', 'transmng/grid.colmodel'], function($, msgbox, blockui, i18n, c18n, urls, util, gmodel) {
    var common, getTableType, grid, restoreSearchToolBarValue, transGrid;
    restoreSearchToolBarValue = function(column, value) {
      var barSelector, searchOpts;
      barSelector = "select[id=gs_" + column + "]";
      $(barSelector).each(function(idx, elem) {
        return elem.value = value;
      });
      searchOpts = ($("#transGrid").jqGrid('getColProp', column)).searchoptions;
      searchOpts.defaultValue = value;
      return $("#transGrid").jqGrid('setColProp', column, {
        searchoptions: searchOpts
      });
    };
    common = {
      colNames: ['ID', 'Application', 'Version', 'Num of String'],
      colModel: [
        {
          name: 'id',
          index: 'id',
          width: 55,
          align: 'center',
          hidden: true,
          frozen: true
        }, {
          name: 'application',
          index: 'base.name',
          width: 100,
          editable: false,
          align: 'left',
          frozen: true,
          stype: 'select',
          searchoptions: {
            value: ":All",
            dataEvents: [
              {
                type: 'change',
                fn: function(e) {
                  var searchvalue;
                  searchvalue = $("#transGrid").jqGrid('getGridParam', 'searchvalue');
                  searchvalue.app = e.target.value;
                  return $("#transGrid").jqGrid('setGridParam', {
                    'searchvalue': searchvalue
                  });
                }
              }
            ]
          }
        }, {
          name: 'appVersion',
          index: 'version',
          width: 90,
          editable: false,
          align: 'left',
          frozen: true,
          search: false
        }, {
          name: 'numOfString',
          index: 'labelNum',
          width: 80,
          align: 'right',
          frozen: true,
          search: false
        }
      ]
    };
    grid = {
      dictionary: {
        colNames: common.colNames.slice(0).insert(3, ['Dictionary', 'Version', 'Encoding', 'Format']),
        colModel: common.colModel.slice(0).insert(3, [
          {
            name: 'dictionary',
            index: 'base.name',
            width: 90,
            editable: false,
            align: 'left',
            frozen: true,
            search: false
          }, {
            name: 'dictVersion',
            index: 'version',
            width: 90,
            editable: false,
            align: 'left',
            frozen: true,
            search: false
          }, {
            name: 'encoding',
            index: 'base.encoding',
            width: 90,
            editable: false,
            align: 'left',
            frozen: true,
            stype: 'select',
            searchoptions: {
              value: ":All;" + c18n.dictencodings,
              dataEvents: [
                {
                  type: 'change',
                  fn: function(e) {
                    var searchvalue;
                    searchvalue = $("#transGrid").jqGrid('getGridParam', 'searchvalue');
                    searchvalue.encoding = e.target.value;
                    return $("#transGrid").jqGrid('setGridParam', {
                      'searchvalue': searchvalue
                    });
                  }
                }
              ]
            }
          }, {
            name: 'format',
            index: 'base.format',
            width: 90,
            editable: false,
            align: 'left',
            frozen: true,
            stype: 'select',
            searchoptions: {
              value: ":All;" + c18n.dictformats,
              dataEvents: [
                {
                  type: 'change',
                  fn: function(e) {
                    var searchvalue;
                    searchvalue = $("#transGrid").jqGrid('getGridParam', 'searchvalue');
                    searchvalue.format = e.target.value;
                    return $("#transGrid").jqGrid('setGridParam', {
                      'searchvalue': searchvalue
                    });
                  }
                }
              ]
            }
          }
        ])
      },
      application: {
        colNames: ['Dummy'].concat(common.colNames),
        colModel: [
          {
            name: 'dummy',
            index: 'dummy',
            width: 55,
            align: 'center',
            hidden: true,
            frozen: true
          }
        ].concat(common.colModel)
      }
    };
    getTableType = function() {
      if (-1 === ($.inArray('Dummy', $("#transGrid").getGridParam('colNames')))) {
        return 'dict';
      } else {
        return 'app';
      }
    };
    /* Construct the grid with the column name(model) parameters above and other required parameters
    */

    transGrid = $("#transGrid").jqGrid({
      url: urls.dicts,
      mtype: 'post',
      postData: {},
      datatype: 'local',
      width: 1000,
      height: 300,
      viewrecords: true,
      gridview: true,
      multiselect: true,
      rownumbers: true,
      shrinkToFit: false,
      pager: '#transPager',
      rowNum: 60,
      rowList: [20, 30, 60, 120, 500, 1000],
      sortname: 'app.base.name',
      sortorder: 'asc',
      colNames: grid.dictionary.colNames,
      colModel: grid.dictionary.colModel,
      searchvalue: {},
      groupHeaders: [],
      beforeProcessing: function(data, status, xhr) {},
      gridComplete: function() {
        transGrid = $(this);
        $('a', this).each(function(index, a) {
          if ('0' === $(a).text()) {
            return $(a).before(' ').remove();
          }
        });
        return $('a', this).css('color', 'blue').click(function() {
          var allZero, language, pageParams, rowData, rowid,
            _this = this;
          pageParams = util.getUrlParams(this.href);
          rowid = pageParams != null ? pageParams.id : void 0;
          language = {
            id: pageParams.languageId,
            name: pageParams.languageName
          };
          rowData = transGrid.getRowData(rowid);
          allZero = true;
          $(['T', 'N', 'I']).each(function(index, elem) {
            var num;
            num = parseInt(rowData["" + language.name + "." + elem]);
            allZero = 0 === num;
            return allZero;
          });
          if (allZero) {
            if (typeof console !== "undefined" && console !== null) {
              console.log('zero');
            }
            return;
          }
          return util.getDictLanguagesByDictId(rowid, function(languages) {
            var dialogs;
            dialogs = require('transmng/dialogs');
            return dialogs.showTransDetailDialog({
              dict: {
                id: rowid,
                name: rowData.dictionary
              },
              language: language,
              languages: languages
            });
          });
        });
      },
      afterCreate: function(grid) {
        grid.setGridParam({
          'datatype': 'json'
        });
        grid.setGroupHeaders({
          useColSpanStyle: true,
          groupHeaders: grid.getGridParam('groupHeaders')
        });
        if (getTableType() === 'dict') {
          grid.filterToolbar({
            stringResult: true,
            searchOnEnter: false
          });
        }
        grid.navGrid('#transPager', {
          edit: false,
          add: false,
          del: false,
          search: false,
          view: false
        });
        return grid.setFrozenColumns();
      }
    });
    transGrid.getGridParam('afterCreate')(transGrid);
    $('#makeLabelTranslateStatus').attr('privilegeName', util.urlname2Action('trans/update-status')).button({
      icons: {
        primary: "ui-icon-triangle-1-n",
        secondary: "ui-icon-gear"
      }
    }).click(function(e) {
      var menu;
      menu = $('#translationStatus').show().width($(this).width() - 3).position({
        my: "left bottom",
        at: "left top",
        of: this
      });
      $(document).one("click", function() {
        return menu.hide();
      });
      return false;
    });
    $('#translationStatus').menu().hide().find("li").on('click', function(e) {
      var selectedRowIds;
      transGrid = $("#transGrid");
      selectedRowIds = transGrid.getGridParam('selarrrow').join(',');
      if (!selectedRowIds) {
        $.msgBox(c18n.selrow.format(c18n.dict), null, {
          title: c18n.warning
        });
        return;
      }
      $.blockUI();
      return $.post('trans/update-status', {
        type: getTableType(),
        transStatus: e.target.name,
        id: selectedRowIds
      }, function(json) {
        if (json.status !== 0) {
          $.msgBox(json.message, null, {
            title: c18n.warning
          });
          return;
        }
        $.unblockUI();
        $.msgBox(i18n.msgbox.transstatus.msg, null, {
          title: c18n.message
        });
        return transGrid.trigger('reloadGrid');
      });
    });
    return {
      updateGrid: function(param) {
        var app, gridParam, isApp, postData, prop, searchoptions, searchvalue, summary, url;
        transGrid = $("#transGrid");
        summary = ($(param.languages).map(function() {
          var _this;
          _this = this;
          return ($([0, 1, 2]).map(function() {
            return "s(" + _this.id + ")[" + this + "]";
          })).get().join(',');
        })).get().join(',');
        gridParam = transGrid.getGridParam();
        isApp = param.level === "app";
        if (isApp) {
          url = urls.apps;
          prop = "id,id,base.name,version,labelNum," + summary;
          transGrid.setColProp('application', {
            search: false,
            index: 'base.name'
          });
          transGrid.setGridParam({
            'sortname': 'base.name'
          });
          postData = {
            format: 'grid',
            prop: prop
          };
          postData[param.type] = param.release.id;
          gridParam.colNames = grid.application.colNames;
          gridParam.colModel = grid.application.colModel;
          transGrid.updateTaskLanguage(param.languages);
          return transGrid.reloadAll(url, postData);
        } else {
          url = urls.dicts;
          prop = "id,app.base.name,app.version,base.name,version,base.encoding,base.format,labelNum," + summary;
          gridParam.colNames = grid.dictionary.colNames;
          gridParam.colModel = grid.dictionary.colModel;
          searchoptions = transGrid.getColProp('application').searchoptions;
          transGrid.setColProp('application', {
            searchoptions: searchoptions,
            index: 'app.base.name'
          });
          if ('prod' === param.type) {
            app = ":All";
            $.ajax({
              url: urls.apps,
              data: {
                prod: param.release.id,
                prop: "id,name"
              },
              async: false,
              dataType: 'json',
              success: function(json) {
                return $(json).each(function() {
                  return app += ";" + this.name + ":" + this.name;
                });
              }
            });
            transGrid.setGridParam({
              'sortname': 'app.base.name'
            });
          } else {
            app = "" + param.name + ":" + param.name;
            transGrid.setGridParam({
              'sortname': 'base.name'
            });
          }
          searchoptions.value = app;
          postData = {
            format: 'grid',
            prop: prop
          };
          postData[param.type] = param.release.id;
          transGrid.updateTaskLanguage(param.languages);
          gridParam.datatype = 'local';
          transGrid = transGrid.reloadAll(url, postData);
          searchvalue = $("#transGrid").jqGrid('getGridParam', 'searchvalue');
          if (searchvalue.app) {
            restoreSearchToolBarValue('application', searchvalue.app);
          }
          if (searchvalue.encoding) {
            restoreSearchToolBarValue('encoding', searchvalue.encoding);
          }
          if (searchvalue.format) {
            restoreSearchToolBarValue('format', searchvalue.format);
          }
          transGrid.setGridParam({
            'datatype': 'json'
          });
          if (searchvalue.app || searchvalue.encoding || searchvalue.format) {
            return $("#transGrid")[0].triggerToolbar();
          } else {
            return transGrid.trigger('reloadGrid');
          }
        }
      },
      getTotalSelectedRowInfo: function() {
        var count, selectedRowIds;
        transGrid = $("#transGrid");
        selectedRowIds = transGrid.getGridParam('selarrrow');
        count = 0;
        $(selectedRowIds).each(function() {
          var row;
          row = transGrid.getRowData(this);
          return count += parseInt(row.numOfString);
        });
        return {
          rowIds: selectedRowIds,
          totalLabels: count
        };
      },
      getTableType: getTableType
    };
  });

}).call(this);
