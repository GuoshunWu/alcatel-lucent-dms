// Generated by CoffeeScript 1.4.0
(function() {

  define(['jqgrid', 'util', 'jqmsgbox', 'transmng/grid.colmodel', 'blockui', 'i18n!nls/transmng', 'i18n!nls/common', 'require'], function($, util, msgbox, gmodel, blockui, i18n, c18n, require) {
    var common, getTableType, grid, restoreSearchToolBarValue, transGrid, urls;
    urls = require('dms-urls');
    restoreSearchToolBarValue = function(column, value) {
      var searchOpts;
      if (typeof console !== "undefined" && console !== null) {
        console.log("Set default value to " + value + " for " + column);
      }
      $("select[id=gs_" + column + "]").each(function(idx, elem) {
        return elem.value = value;
      });
      searchOpts = ($("#transGrid").jqGrid('getColProp', column)).searchoptions;
      searchOpts.defaultValue = value;
      return $("#transGrid").jqGrid('setColProp', column, {
        searchoptions: searchOpts
      });
    };
    common = {
      colNames: ['ID', 'Application', 'Version', 'Num of String'],
      colModel: [
        {
          name: 'id',
          index: 'id',
          width: 55,
          align: 'center',
          hidden: true,
          frozen: true
        }, {
          name: 'application',
          index: 'base.name',
          width: 100,
          editable: false,
          align: 'left',
          frozen: true,
          stype: 'select',
          searchoptions: {
            value: ":All",
            dataEvents: [
              {
                type: 'change',
                fn: function(e) {
                  var searchvalue;
                  searchvalue = $("#transGrid").jqGrid('getGridParam', 'searchvalue');
                  searchvalue.app = e.target.value;
                  return $("#transGrid").jqGrid('setGridParam', 'searchvalue', searchvalue);
                }
              }
            ]
          }
        }, {
          name: 'appVersion',
          index: 'version',
          width: 90,
          editable: false,
          align: 'left',
          frozen: true,
          search: false
        }, {
          name: 'numOfString',
          index: 'labelNum',
          width: 80,
          align: 'right',
          frozen: true,
          search: false
        }
      ]
    };
    grid = {
      dictionary: {
        colNames: common.colNames.slice(0).insert(3, ['Dictionary', 'Version', 'Encoding', 'Format']),
        colModel: common.colModel.slice(0).insert(3, [
          {
            name: 'dictionary',
            index: 'base.name',
            width: 90,
            editable: false,
            align: 'left',
            frozen: true,
            search: false
          }, {
            name: 'dictVersion',
            index: 'version',
            width: 90,
            editable: false,
            align: 'left',
            frozen: true,
            search: false
          }, {
            name: 'encoding',
            index: 'base.encoding',
            width: 90,
            editable: false,
            align: 'left',
            frozen: true,
            stype: 'select',
            searchoptions: {
              value: ":All;" + c18n.dictencodings,
              dataEvents: [
                {
                  type: 'change',
                  fn: function(e) {
                    var searchvalue;
                    searchvalue = $("#transGrid").jqGrid('getGridParam', 'searchvalue');
                    searchvalue.encoding = e.target.value;
                    return $("#transGrid").jqGrid('setGridParam', 'searchvalue', searchvalue);
                  }
                }
              ]
            }
          }, {
            name: 'format',
            index: 'base.format',
            width: 90,
            editable: false,
            align: 'left',
            frozen: true,
            stype: 'select',
            searchoptions: {
              value: ":All;" + c18n.dictformats,
              dataEvents: [
                {
                  type: 'change',
                  fn: function(e) {
                    var searchvalue;
                    searchvalue = $("#transGrid").jqGrid('getGridParam', 'searchvalue');
                    searchvalue.format = e.target.value;
                    return $("#transGrid").jqGrid('setGridParam', 'searchvalue', searchvalue);
                  }
                }
              ]
            }
          }
        ])
      },
      application: {
        colNames: ['Dummy'].concat(common.colNames),
        colModel: [
          {
            name: 'dummy',
            index: 'dummy',
            width: 55,
            align: 'center',
            hidden: true,
            frozen: true
          }
        ].concat(common.colModel)
      }
    };
    getTableType = function() {
      if (-1 === ($.inArray('Dummy', $("#transGrid").getGridParam('colNames')))) {
        return 'dict';
      } else {
        return 'app';
      }
    };
    /* Construct the grid with the column name(model) parameters above and other required parameters
    */

    return transGrid = $("#transGrid").jqGrid({
      url: urls.dicts,
      mtype: 'post',
      postData: {},
      datatype: 'local',
      width: 1000,
      height: 300,
      rownumbers: true,
      shrinkToFit: false,
      pager: '#transPager',
      rowNum: 60,
      rowList: [20, 30, 60, 120, 500, 1000],
      sortname: 'app.base.name',
      sortorder: 'asc',
      multiselect: true,
      colNames: grid.dictionary.colNames,
      colModel: grid.dictionary.colModel,
      beforeProcessing: function(data, status, xhr) {},
      gridComplete: function() {
        transGrid = $(this);
        $('a', this).each(function(index, a) {
          if ('0' === $(a).text()) {
            return $(a).before(' ').remove();
          }
        });
        return $('a', this).css('color', 'blue').click(function() {
          var allZero, language, pageParams, rowData, rowid,
            _this = this;
          pageParams = util.getUrlParams(this.href);
          rowid = pageParams != null ? pageParams.id : void 0;
          language = {
            id: pageParams.languageId,
            name: pageParams.languageName
          };
          rowData = transGrid.getRowData(rowid);
          allZero = true;
          $(['T', 'N', 'I']).each(function(index, elem) {
            var num;
            num = parseInt(rowData["" + language.name + "." + elem]);
            allZero = 0 === num;
            return allZero;
          });
          if (allZero) {
            if (typeof console !== "undefined" && console !== null) {
              console.log('zero');
            }
            return;
          }
          return util.getDictLanguagesByDictId(rowid, function(languages) {
            var transLayout;
            transLayout = require('transmng/layout');
            return transLayout.showTransDetailDialog({
              dict: {
                id: rowid,
                name: rowData.dictionary
              },
              language: language,
              languages: languages
            });
          });
        });
      },
      searchvalue: {},
      groupHeaders: [],
      afterCreate: function(grid) {
        grid.setGridParam({
          'datatype': 'json'
        });
        grid.setGroupHeaders({
          useColSpanStyle: true,
          groupHeaders: grid.getGridParam('groupHeaders')
        });
        if (getTableType() === 'dict') {
          grid.filterToolbar({
            stringResult: true,
            searchOnEnter: false
          });
        }
        grid.navGrid('#transPager', {
          edit: false,
          add: false,
          del: false,
          search: false,
          view: false
        });
        return grid.setFrozenColumns();
      }
    });
  });

}).call(this);
