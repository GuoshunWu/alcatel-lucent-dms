<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
">

    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
    <!--<property name="driverClassName" value="org.logicalcobwebs.proxool.ProxoolDriver"/>-->
    <!--<property name="url" value="${db.url}"/>-->
    <!--<property name="username" value="${db.user}" />-->
    <!--<property name="password"  value="${db.password}" />-->
    <!--</bean>-->

    <!-- Exception translation bean post processor
    The postprocessor automatically looks for all exception translators (implementations of the
    PersistenceExceptionTranslator interface) and advises all beans marked with the
    @Repository annotation so that the discovered translators can intercept and apply the appropriate
    translation on the thrown exceptions
    -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">

        <property name="hibernateProperties">
            <props>
                
                <!-- for hibernate search -->
                <prop key="hibernate.search.default.directory_provider">filesystem</prop>
                <prop key="hibernate.search.default.indexBase">${dms.luceneindex.dir}</prop>


                <prop key="hibernate.proxool.properties">proxool.properties</prop>
                <prop key="hibernate.hbm2ddl.auto">${db.hbm2ddl.auto}</prop>

                <prop key="hibernate.proxool.pool_alias">DB_Pool</prop>
                <prop key="hibernate.dialect">${db.dialect}</prop>

                <prop key="hibernate.proxool.existing_pool">false</prop>
                <prop key="hibernate.connection.provider_class">com.alcatel_lucent.dms.util.DMSProxoolConnectionProvider</prop>
                
                <prop key="hibernate.connection.release_mode">auto</prop>
                <!-- connection.pool_size is used to configure the number of connections in Hibernate's built-in connection pool. -->
                <prop key="hibernate.connection.pool_size">10</prop>
                <!-- Enable Hibernate's automatic session context management -->
                <prop key="hibernate.current_session_context_class">thread</prop>
                
                <!--<prop key="hibernate.mapping.precedence">class, hbm</prop>-->

                <!-- Improving performance -->
                <prop key="hibernate.default_batch_fetch_size">200</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.default_cache_concurrency_strategy">read-only</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.OSCacheProvider</prop>

                <prop key="hibernate.jdbc.batch_size">30</prop>


                <!-- Echo all executed SQL to stdout -->
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.use_sql_comments">true</prop>
                <prop key="hibernate.default_schema">dms</prop>

                <prop key="hibernate.connection.release_mode">auto</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
                <!--
                We recommend all new projects to use the new enhanced identifier generators.
                They are deactivated by default for entities using annotations but can be activated
                using  hibernate.id.new_generator_mappings=true. These new generators
                are more efficient and closer to the JPA 2 specification semantic.
                However they are not backward compatible with existing Hibernate based
                application (if a sequence or a table is used for id generation). See XXXXXXX ???
                for more information on how to activate them.
                -->
                <prop key="hibernate.id.new_generator_mappings">true</prop>
            </props>
        </property>

        <property name="packagesToScan" value="com.alcatel_lucent.dms.model.test"/>
        <property name="mappingDirectoryLocations">
            <list>
                <value>classpath:com/alcatel_lucent/dms/model</value>
            </list>
        </property>
    </bean>

    <bean id="transactionManager" scope="singleton"
          class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="retrieve*" read-only="true"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*" isolation="DEFAULT" propagation="REQUIRED" timeout="-1"
                       rollback-for="com.alcatel_lucent.dms.BusinessException"/>
        </tx:attributes>
    </tx:advice>
    <!-- ensure that the above transactional advice runs for any execution
    of an operation defined by the FooService interface -->
    <aop:config>
        <aop:pointcut id="serviceOperation"
                      expression="execution(* com.alcatel_lucent.dms.service.*Service.*(..)) ||within(com.alcatel_lucent.dms.rest.*)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
    </aop:config>

</beans>