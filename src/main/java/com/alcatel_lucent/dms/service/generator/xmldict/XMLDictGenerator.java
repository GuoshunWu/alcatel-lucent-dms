package com.alcatel_lucent.dms.service.generator.xmldict;

import com.alcatel_lucent.dms.BusinessException;
import com.alcatel_lucent.dms.SystemError;
import com.alcatel_lucent.dms.model.Dictionary;
import com.alcatel_lucent.dms.service.DaoService;
import com.alcatel_lucent.dms.service.generator.DictionaryGenerator;
import com.alcatel_lucent.dms.util.Util;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DurationFormatUtils;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;
import org.hibernate.FetchMode;
import org.hibernate.criterion.Restrictions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Map;


import static org.apache.commons.lang3.StringUtils.center;

@Component("XmlDictGenerator")
public class XMLDictGenerator implements DictionaryGenerator {

    private static Logger log = LoggerFactory.getLogger(XMLDictGenerator.class);

    @Autowired
    private DaoService dao;

    @Override
    public void generateDict(File targetDir, Long dictId) throws BusinessException {
//        Dictionary dict = (Dictionary) dao.retrieve(Dictionary.class, dictId);
//        Improving performance
        long begin = System.currentTimeMillis();
        Dictionary dict = (Dictionary) dao.getSession().
                createCriteria(Dictionary.class).
                add(Restrictions.idEq(dictId)).
                setFetchMode("labels", FetchMode.JOIN).
                setCacheable(true).
//                setFetchMode("labels.params", FetchMode.SELECT).
//                setFetchMode("labels.origTranslations", FetchMode.DEFAULT).
//                setFetchMode("labels.text", FetchMode.DEFAULT).
//                setFetchMode("labels.text.translations", FetchMode.DEFAULT).
                uniqueResult();
        long end = System.currentTimeMillis();
        String timeStr = DurationFormatUtils.formatPeriod(begin, end, "mm 'minute(s)' ss 'second(s)'.");
        log.info(center("Querying dictionary " + dict.getName() + " using a total of " + timeStr, 100, '*'));

        generateDict(targetDir, dict);
    }

    public void generateDict(File targetDir, Dictionary dict) throws BusinessException {
        XMLWriter writer = null;

        try {
            File file = new File(targetDir, dict.getName() + ".xdct");
            if (!file.exists()) {
                if (!file.getParentFile().exists()) {
                    file.getParentFile().mkdirs();
                }
                file.createNewFile();
            }

            OutputFormat format = OutputFormat.createPrettyPrint();
            format.setIndentSize(4);
            format.setXHTML(true);

            log.info(center("Start generating dictionary " + dict.getName() + "...", 100, '='));
            writer = new XMLWriter(new BufferedOutputStream(new FileOutputStream(file)), format);

            long begin = System.currentTimeMillis();
            Document doc = generateDocument(dict);
            long end = System.currentTimeMillis();
            String timeStr = DurationFormatUtils.formatPeriod(begin, end, "mm 'minute(s)' ss 'second(s)'.");
            log.info(center("Generating dictionary " + dict.getName() + " using a total of " + timeStr, 100, '*'));


            begin = System.currentTimeMillis();
            log.info(center("Start writing dictionary " + dict.getName() + "...", 100, '='));
            writer.write(doc);
            end = System.currentTimeMillis();
            timeStr = DurationFormatUtils.formatPeriod(begin, end, "mm 'minute(s)' ss 'second(s)'.");
            log.info(center("Writing dictionary " + dict.getName() + " using a total of " + timeStr, 100, '*'));


        } catch (IOException e) {
            throw new SystemError(e.getMessage());
        } finally {
            try {
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public Document generateDocument(final Dictionary dict) {

        Document doc = DocumentHelper.createDocument();

        doc.setXMLEncoding("UTF-8");
        if (null == dict) return doc;

        doc.addDocType("DICTIONARY", "", "XMLDICT.dtd");
        doc.addComment(StringUtils.center("Generated by DMS, total labels: " + dict.getLabelNum() + ".", 50, '='));

        final Element xmlDict = doc.addElement("DICTIONARY");

        Map<String, String> attributes = Util.string2Map(dict.getAnnotation1());

        xmlDict.addAttribute("name", attributes.get("name"));
        xmlDict.addAttribute("type", attributes.get("type"));
        xmlDict.addAttribute("appli", attributes.get("appli"));
        xmlDict.addAttribute("separator", attributes.get("separator"));

        LanguageClosure ll = new LanguageClosure(xmlDict);
        CollectionUtils.forAllDo(dict.getDictLanguages(), ll);

        LabelClosure lc = new LabelClosure(xmlDict, dict.getLabelNum());

        log.info(StringUtils.center("Start generating dictionary " + dict.getName() + " labels(total: " + dict.getLabelNum() + ").", 100, '='));
        CollectionUtils.forAllDo(dict.getLabels(), lc);
        System.out.println(" done(100%).");

        return doc;
    }

}
