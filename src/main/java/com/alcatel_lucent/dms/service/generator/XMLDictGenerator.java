package com.alcatel_lucent.dms.service.generator;

import com.alcatel_lucent.dms.BusinessException;
import com.alcatel_lucent.dms.SystemError;
import com.alcatel_lucent.dms.model.Dictionary;
import com.alcatel_lucent.dms.model.DictionaryLanguage;
import com.alcatel_lucent.dms.service.DaoService;
import org.apache.log4j.Logger;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.*;
import java.util.Collection;

import static org.apache.commons.lang.StringUtils.join;

@Component("XmlDictGenerator")
public class XMLDictGenerator implements DictionaryGenerator {

    private static Logger log = Logger.getLogger(XMLDictGenerator.class);

    @Autowired
    private DaoService dao;

    @Override
    public void generateDict(File targetDir, Long dictId) throws BusinessException {
        Dictionary dict = (Dictionary) dao.retrieve(Dictionary.class, dictId);

    }

    public void generateDict(File targetDir, Dictionary dict) throws BusinessException {
        XMLWriter writer = null;
        log.info("");
        try {
            File file = new File(targetDir, dict.getName() + ".xdct");
            if (!file.exists()) {
                if (!file.getParentFile().exists()) {
                    file.getParentFile().mkdirs();
                }
                file.createNewFile();
            }
            writer = new XMLWriter(new FileOutputStream(file), OutputFormat.createPrettyPrint());
            writer.write(generateDocument(dict));
        } catch (IOException e) {
            throw new SystemError(e.getMessage());
        } finally {
            try {
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public Document generateDocument(Dictionary dict) {

        Document doc = DocumentHelper.createDocument();
        doc.setXMLEncoding("UTF-8");
        doc.addDocType("DICTIONARY", "SYSTEM", "XMLPROJECT.dtd");
        Element xmlDict = doc.addElement("DICTIONARY");
        if (null == dict) return doc;
        doc.addComment("\n# Generated by DMS.\n" + "# Labels: " + dict.getLabelNum() + "\n");

        Collection<DictionaryLanguage> languages = dict.getDictLanguages();
        for(DictionaryLanguage language: languages){
            Element xmlLanguage=xmlDict.addElement("LANGUAGE");
            xmlLanguage.addAttribute("id",language.getLanguageCode());
            log.debug(language.getAnnotation1());
        }


        return doc;
    }
}
